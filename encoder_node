import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32MultiArray
import RPi.GPIO as GPIO
import time

class EncoderPublisher(Node):
    def __init__(self):
        super().__init__('encoder_publisher')
        self.publisher_ = self.create_publisher(Int32MultiArray, '/odom', 10)
        
        # GPIO setup
        GPIO.setmode(GPIO.BCM)
        self.left_encoder_a = 17
        self.left_encoder_b = 18
        self.right_encoder_a = 22
        self.right_encoder_b = 23

        GPIO.setup(self.left_encoder_a, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.left_encoder_b, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.right_encoder_a, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.right_encoder_b, GPIO.IN, pull_up_down=GPIO.PUD_UP)

        # Initialize counters
        self.left_ticks = 0
        self.right_ticks = 0

        # Attach interrupts
        GPIO.add_event_detect(self.left_encoder_a, GPIO.RISING, callback=self.update_left_encoder)
        GPIO.add_event_detect(self.right_encoder_a, GPIO.RISING, callback=self.update_right_encoder)

        # Timer to publish encoder values
        self.timer = self.create_timer(0.1, self.publish_encoders)

    def update_left_encoder(self, channel):
        if GPIO.input(self.left_encoder_b) == 1:
            self.left_ticks += 1
        else:
            self.left_ticks -= 1

    def update_right_encoder(self, channel):
        if GPIO.input(self.right_encoder_b) == 1:
            self.right_ticks += 1
        else:
            self.right_ticks -= 1

    def publish_encoders(self):
        msg = Int32MultiArray()
        msg.data = [self.left_ticks, self.right_ticks]
        self.publisher_.publish(msg)
        self.get_logger().info(f'Publishing encoder values: left={self.left_ticks}, right={self.right_ticks}')

    def cleanup(self):
        GPIO.cleanup()


def main(args=None):
    rclpy.init(args=args)
    node = EncoderPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.cleanup()
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
