import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
import adafruit_bno055
import board
import time

class IMUPublisher(Node):
    def __init__(self):
        super().__init__('imu_publisher')
        self.publisher_ = self.create_publisher(Imu, '/imu/data', 10)
        
        # Initialize BNO055 IMU sensor
        i2c = board.I2C()  # uses board.SCL and board.SDA
        self.sensor = adafruit_bno055.BNO055_I2C(i2c)

        # Timer to publish IMU data
        self.timer = self.create_timer(0.1, self.publish_imu)

    def publish_imu(self):
        msg = Imu()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = 'imu_link'

        # Get orientation (quaternion format is not available, using Euler angles for now)
        orientation = self.sensor.euler
        if orientation is not None:
            msg.orientation.x = orientation[0] if orientation[0] is not None else 0.0
            msg.orientation.y = orientation[1] if orientation[1] is not None else 0.0
            msg.orientation.z = orientation[2] if orientation[2] is not None else 0.0

        # Get gyroscope data
        gyro = self.sensor.gyro
        if gyro is not None:
            msg.angular_velocity.x = gyro[0] if gyro[0] is not None else 0.0
            msg.angular_velocity.y = gyro[1] if gyro[1] is not None else 0.0
            msg.angular_velocity.z = gyro[2] if gyro[2] is not None else 0.0

        # Get accelerometer data
        accel = self.sensor.linear_acceleration
        if accel is not None:
            msg.linear_acceleration.x = accel[0] if accel[0] is not None else 0.0
            msg.linear_acceleration.y = accel[1] if accel[1] is not None else 0.0
            msg.linear_acceleration.z = accel[2] if accel[2] is not None else 0.0

        self.publisher_.publish(msg)
        self.get_logger().info(f'Publishing IMU data: orientation={orientation}, gyro={gyro}, accel={accel}')


def main(args=None):
    rclpy.init(args=args)
    node = IMUPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
